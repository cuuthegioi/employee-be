// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: employee/employee.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "employee";

export interface Employee {
  id: number;
  firstName: string;
  lastName: string;
  department: string;
  address: string;
  phoneNumber: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt: Date | undefined;
}

export interface CreateEmployeeRequest {
  name: string;
  description: string;
  image: string;
  tags: string[];
}

export interface CreateEmployeeResponse {
  employee: Employee | undefined;
}

export interface GetEmployeeRequest {
  id: number;
}

export interface GetEmployeeResponse {
  employee: Employee | undefined;
}

export interface ListEmployeesRequest {
}

export interface ListEmployeesResponse {
  employees: Employee[];
}

function createBaseEmployee(): Employee {
  return {
    id: 0,
    firstName: "",
    lastName: "",
    department: "",
    address: "",
    phoneNumber: "",
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
  };
}

export const Employee = {
  encode(message: Employee, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.department !== "") {
      writer.uint32(34).string(message.department);
    }
    if (message.address !== "") {
      writer.uint32(42).string(message.address);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(50).string(message.phoneNumber);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).ldelim();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(66).fork()).ldelim();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Employee {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmployee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.department = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.address = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Employee {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      department: isSet(object.department) ? globalThis.String(object.department) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
    };
  },

  toJSON(message: Employee): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.department !== "") {
      obj.department = message.department;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Employee>, I>>(base?: I): Employee {
    return Employee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Employee>, I>>(object: I): Employee {
    const message = createBaseEmployee();
    message.id = object.id ?? 0;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.department = object.department ?? "";
    message.address = object.address ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    return message;
  },
};

function createBaseCreateEmployeeRequest(): CreateEmployeeRequest {
  return { name: "", description: "", image: "", tags: [] };
}

export const CreateEmployeeRequest = {
  encode(message: CreateEmployeeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEmployeeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmployeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEmployeeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CreateEmployeeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateEmployeeRequest>, I>>(base?: I): CreateEmployeeRequest {
    return CreateEmployeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateEmployeeRequest>, I>>(object: I): CreateEmployeeRequest {
    const message = createBaseCreateEmployeeRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.image = object.image ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateEmployeeResponse(): CreateEmployeeResponse {
  return { employee: undefined };
}

export const CreateEmployeeResponse = {
  encode(message: CreateEmployeeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.employee !== undefined) {
      Employee.encode(message.employee, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEmployeeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEmployeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.employee = Employee.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEmployeeResponse {
    return { employee: isSet(object.employee) ? Employee.fromJSON(object.employee) : undefined };
  },

  toJSON(message: CreateEmployeeResponse): unknown {
    const obj: any = {};
    if (message.employee !== undefined) {
      obj.employee = Employee.toJSON(message.employee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateEmployeeResponse>, I>>(base?: I): CreateEmployeeResponse {
    return CreateEmployeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateEmployeeResponse>, I>>(object: I): CreateEmployeeResponse {
    const message = createBaseCreateEmployeeResponse();
    message.employee = (object.employee !== undefined && object.employee !== null)
      ? Employee.fromPartial(object.employee)
      : undefined;
    return message;
  },
};

function createBaseGetEmployeeRequest(): GetEmployeeRequest {
  return { id: 0 };
}

export const GetEmployeeRequest = {
  encode(message: GetEmployeeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmployeeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmployeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmployeeRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetEmployeeRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEmployeeRequest>, I>>(base?: I): GetEmployeeRequest {
    return GetEmployeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEmployeeRequest>, I>>(object: I): GetEmployeeRequest {
    const message = createBaseGetEmployeeRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetEmployeeResponse(): GetEmployeeResponse {
  return { employee: undefined };
}

export const GetEmployeeResponse = {
  encode(message: GetEmployeeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.employee !== undefined) {
      Employee.encode(message.employee, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmployeeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmployeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.employee = Employee.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmployeeResponse {
    return { employee: isSet(object.employee) ? Employee.fromJSON(object.employee) : undefined };
  },

  toJSON(message: GetEmployeeResponse): unknown {
    const obj: any = {};
    if (message.employee !== undefined) {
      obj.employee = Employee.toJSON(message.employee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEmployeeResponse>, I>>(base?: I): GetEmployeeResponse {
    return GetEmployeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEmployeeResponse>, I>>(object: I): GetEmployeeResponse {
    const message = createBaseGetEmployeeResponse();
    message.employee = (object.employee !== undefined && object.employee !== null)
      ? Employee.fromPartial(object.employee)
      : undefined;
    return message;
  },
};

function createBaseListEmployeesRequest(): ListEmployeesRequest {
  return {};
}

export const ListEmployeesRequest = {
  encode(_: ListEmployeesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEmployeesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEmployeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListEmployeesRequest {
    return {};
  },

  toJSON(_: ListEmployeesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEmployeesRequest>, I>>(base?: I): ListEmployeesRequest {
    return ListEmployeesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEmployeesRequest>, I>>(_: I): ListEmployeesRequest {
    const message = createBaseListEmployeesRequest();
    return message;
  },
};

function createBaseListEmployeesResponse(): ListEmployeesResponse {
  return { employees: [] };
}

export const ListEmployeesResponse = {
  encode(message: ListEmployeesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.employees) {
      Employee.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListEmployeesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEmployeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.employees.push(Employee.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEmployeesResponse {
    return {
      employees: globalThis.Array.isArray(object?.employees)
        ? object.employees.map((e: any) => Employee.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEmployeesResponse): unknown {
    const obj: any = {};
    if (message.employees?.length) {
      obj.employees = message.employees.map((e) => Employee.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEmployeesResponse>, I>>(base?: I): ListEmployeesResponse {
    return ListEmployeesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEmployeesResponse>, I>>(object: I): ListEmployeesResponse {
    const message = createBaseListEmployeesResponse();
    message.employees = object.employees?.map((e) => Employee.fromPartial(e)) || [];
    return message;
  },
};

export type EmployeeServiceService = typeof EmployeeServiceService;
export const EmployeeServiceService = {
  createEmployee: {
    path: "/employee.EmployeeService/CreateEmployee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateEmployeeRequest) => Buffer.from(CreateEmployeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateEmployeeRequest.decode(value),
    responseSerialize: (value: CreateEmployeeResponse) => Buffer.from(CreateEmployeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateEmployeeResponse.decode(value),
  },
  getEmployee: {
    path: "/employee.EmployeeService/GetEmployee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEmployeeRequest) => Buffer.from(GetEmployeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetEmployeeRequest.decode(value),
    responseSerialize: (value: GetEmployeeResponse) => Buffer.from(GetEmployeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetEmployeeResponse.decode(value),
  },
  listEmployees: {
    path: "/employee.EmployeeService/ListEmployees",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListEmployeesRequest) => Buffer.from(ListEmployeesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListEmployeesRequest.decode(value),
    responseSerialize: (value: ListEmployeesResponse) => Buffer.from(ListEmployeesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListEmployeesResponse.decode(value),
  },
} as const;

export interface EmployeeServiceServer extends UntypedServiceImplementation {
  createEmployee: handleUnaryCall<CreateEmployeeRequest, CreateEmployeeResponse>;
  getEmployee: handleUnaryCall<GetEmployeeRequest, GetEmployeeResponse>;
  listEmployees: handleUnaryCall<ListEmployeesRequest, ListEmployeesResponse>;
}

export interface EmployeeServiceClient extends Client {
  createEmployee(
    request: CreateEmployeeRequest,
    callback: (error: ServiceError | null, response: CreateEmployeeResponse) => void,
  ): ClientUnaryCall;
  createEmployee(
    request: CreateEmployeeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateEmployeeResponse) => void,
  ): ClientUnaryCall;
  createEmployee(
    request: CreateEmployeeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateEmployeeResponse) => void,
  ): ClientUnaryCall;
  getEmployee(
    request: GetEmployeeRequest,
    callback: (error: ServiceError | null, response: GetEmployeeResponse) => void,
  ): ClientUnaryCall;
  getEmployee(
    request: GetEmployeeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetEmployeeResponse) => void,
  ): ClientUnaryCall;
  getEmployee(
    request: GetEmployeeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetEmployeeResponse) => void,
  ): ClientUnaryCall;
  listEmployees(
    request: ListEmployeesRequest,
    callback: (error: ServiceError | null, response: ListEmployeesResponse) => void,
  ): ClientUnaryCall;
  listEmployees(
    request: ListEmployeesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListEmployeesResponse) => void,
  ): ClientUnaryCall;
  listEmployees(
    request: ListEmployeesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListEmployeesResponse) => void,
  ): ClientUnaryCall;
}

export const EmployeeServiceClient = makeGenericClientConstructor(
  EmployeeServiceService,
  "employee.EmployeeService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EmployeeServiceClient;
  service: typeof EmployeeServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
